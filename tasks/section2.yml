---
# tasks file for ansible-cis-ubuntu-2204

# ------------------------------------------------------------------------------

- name: "SECTION2 | 2.1.1 | Ensure autofs services are not in use"
  ansible.builtin.systemd:
    name: autofs.service
    daemon_reload: true
    enabled: false
    masked: true
    state: stopped
  when:
    - service_status_autofs.stdout == "loaded"
    - not cis_ubuntu2204_allow_autofs
    - cis_ubuntu2204_rule_2_1_1
  tags:
    - rule_2_1_1
    - server_l1
    - workstation_l2

# ------------------------------------------------------------------------------

- name: "SECTION2 | 2.1.1.1 | Ensure a single time synchronization daemon is in use"
  when:
    - cis_ubuntu2204_rule_2_1_1_1
  tags:
    - rule_2_1
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION2 | 2.1.1.1 | Ensure a single time synchronization daemon is in use | install service 'chrony | systemd-timesyncd | ntp'"
      ansible.builtin.apt:
        name: "{{ cis_ubuntu2204_time_synchronization_service }}"
        state: present
        install_recommends: false
      notify: "restart {{ cis_ubuntu2204_time_synchronization_service }}"

    - name: "SECTION2 | 2.1.1.1 | Ensure a single time synchronization daemon is in use | remove ntp"
      ansible.builtin.apt:
        name: ntp
        state: absent
      when: cis_ubuntu2204_time_synchronization_service != "ntp"

    - name: "SECTION2 | 2.1.1.1 | Ensure a single time synchronization daemon is in use | remove chrony"
      ansible.builtin.apt:
        name: chrony
        state: absent
      when: cis_ubuntu2204_time_synchronization_service != "chrony"

    - name: "SECTION2 | 2.1.1.1 | Ensure a single time synchronization daemon is in use | mask systemd-timesyncd"
      ansible.builtin.systemd:
        name: systemd-timesyncd
        masked: true
      when:
        - cis_ubuntu2204_time_synchronization_service != "systemd-timesyncd"
        - service_status_systemd_timesyncd.stdout == "loaded"

- name: "SECTION2 | 2.1.2.1 | Ensure chrony is configured with authorized timeserver"
  ansible.builtin.template:
    src: chrony.conf.j2
    dest: /etc/chrony/chrony.conf
    mode: "0644"
    owner: root
    group: root
  notify: "restart {{ cis_ubuntu2204_time_synchronization_service }}"
  when:
    - cis_ubuntu2204_rule_2_1_2_1
    - cis_ubuntu2204_time_synchronization_service == "chrony"
  tags:
    - rule_2_1
    - server_l1
    - workstation_l1

- name: "SECTION2 | 2.1.2.2 | Ensure chrony is running as user _chrony"
  when:
    - cis_ubuntu2204_rule_2_1_2_2
    - cis_ubuntu2204_time_synchronization_service == "chrony"
  tags:
    - rule_2_1
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION2 | 2.1.2.2 | Ensure chrony is running as user _chrony | set in chrony.conf"
      ansible.builtin.template:
        src: chrony.conf.j2
        dest: /etc/chrony/chrony.conf
        mode: "0644"
        owner: root
        group: root
      notify: "restart {{ cis_ubuntu2204_time_synchronization_service }}"
    - name: "SECTION2 | 2.1.2.2 | Ensure chrony is running as user _chrony | set in chronyd"
      ansible.builtin.lineinfile:
        dest: /etc/sysconfig/chronyd
        regexp: '{{ cis_ubuntu2204_regex_base_search }}OPTIONS((.*)?=|\s|$)'
        line: 'OPTIONS="-u _chrony"'
        state: present
        create: true
        owner: root
        group: root
        mode: "0644"
      notify: "restart {{ cis_ubuntu2204_time_synchronization_service }}"

# NOTE: SECTION2 | 2.1.2.3 | Ensure chrony is enabled and running
##      is done since it is started and enabled default in jobs above

- name: "SECTION2 | 2.1.3.1 | Ensure systemd-timesyncd configured with authorized timeserver"
  ansible.builtin.template:
    src: systemd-timesyncd.conf.j2
    dest: /etc/systemd/timesyncd.conf.d/systemd-timesyncd.conf
    mode: "0644"
    owner: root
    group: root
  notify: "restart {{ cis_ubuntu2204_time_synchronization_service }}"
  when:
    - cis_ubuntu2204_rule_2_1_3_1
    - cis_ubuntu2204_time_synchronization_service == "systemd-timesyncd"
  tags:
    - rule_2_1
    - server_l1
    - workstation_l1

# NOTE: SECTION2 | 2.1.2.3 | Ensure systemd-timesyncd is enabled and running
##      is done since it is started and enabled default in jobs above

- name: "SECTION2 | 2.1.4.1 | Ensure ntp access control is configured"
  ansible.builtin.template:
    src: ntp.conf.j2
    dest: /etc/ntp.conf
    mode: "0644"
    owner: root
    group: root
  notify: "restart {{ cis_ubuntu2204_time_synchronization_service }}"
  when:
    - cis_ubuntu2204_rule_2_1_4_1
    - cis_ubuntu2204_time_synchronization_service == "ntp"
  tags:
    - rule_2_1
    - server_l1
    - workstation_l1

- name: "SECTION2 | 2.1.4.2 | Ensure ntp is configured with authorized timeserver"
  ansible.builtin.template:
    src: ntp.conf.j2
    dest: /etc/ntp.conf
    mode: "0644"
    owner: root
    group: root
  notify: "restart {{ cis_ubuntu2204_time_synchronization_service }}"
  when:
    - cis_ubuntu2204_rule_2_1_4_2
    - cis_ubuntu2204_time_synchronization_service == "ntp"
  tags:
    - rule_2_1
    - server_l1
    - workstation_l1

- name: "SECTION2 | 2.1.4.3 | Ensure ntp is running as user ntp"
  ansible.builtin.lineinfile:
    dest: /etc/init.d/ntp
    regexp: '{{ cis_ubuntu2204_regex_base_search }}RUNASUSER((.*)?=|\s|$)'
    line: "RUNASUSER=ntp"
    state: present
    create: true
    owner: root
    group: root
    mode: "0644"
  notify: "restart {{ cis_ubuntu2204_time_synchronization_service }}"
  when:
    - cis_ubuntu2204_rule_2_1_4_3
    - cis_ubuntu2204_time_synchronization_service == "ntp"
  tags:
    - rule_2_1
    - server_l1
    - workstation_l1

# NOTE: SECTION2 | 2.1.2.3 | Ensure ntp is enabled and running
##      is done since it is started and enabled default in jobs above

# ------------------------------------------------------------------------------

- name: "SECTION2 | 2.2.1-14 | Special Purpose Services ..."
  ansible.builtin.apt:
    name: "{{ item.apt }}"
    state: absent
    purge: true
  loop: "{{ cis_ubuntu2204_2_2_rule_set | flatten(levels=1) }}"
  when: item.check
  tags:
    - rule_2_2
    - server_l1
    - workstation_l1

- name: "SECTION2 | 2.2.15 | Ensure mail transfer agent is configured for local-only mode"
  ansible.builtin.lineinfile:
    dest: /etc/postfix/main.cf
    regexp: '{{ cis_ubuntu2204_regex_base_search }}inet_interfaces((.*)?=|\s|$)'
    line: "inet_interfaces = loopback-only"
    state: present
    create: true
    owner: root
    group: root
    mode: "0644"
  when:
    - cis_ubuntu2204_rule_2_2_15
    - package_installed_postfix.rc == 0
  tags:
    - rule_2_2
    - server_l1
    - workstation_l1

# ------------------------------------------------------------------------------

- name: "SECTION2 | 2.3.1-6 | Service Clients ..."
  ansible.builtin.apt:
    name: "{{ item.apt }}"
    state: absent
    purge: true
  loop: "{{ cis_ubuntu2204_2_3_rule_set | flatten(levels=1) }}"
  when: item.check
  tags:
    - rule_2_3
    - server_l1
    - workstation_l1

# ------------------------------------------------------------------------------

- name: "SECTION2 | 2.4 | Ensure rsync service is either not installed or masked"
  ansible.builtin.debug:
    msg: |
      #############################################################################################
      Run the following command:
      # lsof -i -P -n | grep -v "(ESTABLISHED)"
      Review the output to ensure that all services listed are required on the system. If a listed
      service is not required, remove the package containing the service. If the package
      containing a non-essential service is required, stop and mask the non-essential service.

      Run the following command to remove the package containing the service:
      # apt purge <package_name>

      OR If required packages have a dependency:
      Run the following command to stop and mask the service:
      # systemctl --now mask <service_name>
      #############################################################################################
  changed_when: false
  when:
    - cis_ubuntu2204_rule_2_4
  tags:
    - rule_2_4
    - server_l1
    - workstation_l1
