---
# tasks file for ansible-cis-ubuntu-2204

# ------------------------------------------------------------------------------

- name: "SECTION4 | 4.1.1 | Ensure ufw is installed"
  ansible.builtin.apt:
    name: ufw
    state: present
    force_apt_get: true
  when:
    - cis_ubuntu2204_rule_4_1_1
    - cis_ubuntu2204_firewall == "ufw"
  tags:
    - rule_4_1
    - server_l1
    - workstation_l1

- name: "SECTION4 | 4.1.2 | Ensure iptables-persistent is not installed with ufw"
  ansible.builtin.apt:
    name: iptables-persistent
    state: absent
    purge: true
  when:
    - cis_ubuntu2204_rule_4_1_2
    - cis_ubuntu2204_firewall == "ufw"
  tags:
    - rule_4_1
    - server_l1
    - workstation_l1

- name: "SECTION4 | 4.1.3 | Ensure ufw service is enabled"
  when:
    - cis_ubuntu2204_rule_4_1_3
    - cis_ubuntu2204_firewall == "ufw"
  tags:
    - rule_4_1
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION4 | 4.1.3 | Ensure ufw service is enabled | allow ssh"
      community.general.ufw:
        rule: allow
        direction: in
        from_ip: any
        to_ip: any
        to_port: 22
        protocol: tcp
        interface: "{{ ansible_default_ipv4['interface'] }}"
        log: true
        comment: "allow incoming connection on standard ssh port for interface {{ ansible_default_ipv4['interface'] }}"
    - name: "SECTION4 | 4.1.3 | Ensure ufw service is enabled | enable service"
      ansible.builtin.systemd_service:
        name: ufw.service
        daemon_reload: true
        enabled: true
        masked: false
        state: started
    - name: "SECTION4 | 4.1.3 | Ensure ufw service is enabled | enable ufw"
      community.general.ufw:
        state: enabled

- name: "SECTION4 | 4.1.4 | Ensure ufw loopback traffic is configured"
  when:
    - cis_ubuntu2204_rule_4_1_4
    - cis_ubuntu2204_firewall == "ufw"
  tags:
    - rule_4_1
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION4 | 4.1.4 | Ensure ufw loopback traffic is configured | ingress allow in on lo"
      community.general.ufw:
        rule: allow
        direction: in
        interface: lo
        log: false
    - name: "SECTION4 | 4.1.4 | Ensure ufw loopback traffic is configured | egress allow out on lo"
      community.general.ufw:
        rule: allow
        direction: out
        interface: lo
        log: false
    - name: "SECTION4 | 4.1.4 | Ensure ufw loopback traffic is configured | ingress deny in from 127.0.0.0/8"
      community.general.ufw:
        rule: deny
        direction: in
        from: "127.0.0.0/8"
        log: false
    - name: "SECTION4 | 4.1.4 | Ensure ufw loopback traffic is configured | ingress deny in from ::1"
      community.general.ufw:
        rule: deny
        direction: in
        from: "::1"
        log: false
      when:
        - not cis_ubuntu2204_rule_3_1_1 and cis_ubuntu2204_required_ipv6

- name: "SECTION4 | 4.1.5 | Ensure ufw outbound connections are configured"
  community.general.ufw:
    rule: allow
    direction: out
    to: any
    log: false
  when:
    - cis_ubuntu2204_rule_4_1_5
    - cis_ubuntu2204_firewall == "ufw"
  tags:
    - rule_4_1
    - server_l1
    - workstation_l1

- name: "SECTION4 | 4.1.6 | Ensure ufw firewall rules exist for all open ports"
  community.general.ufw:
    rule: "{{ item.rule }}"
    direction: "{{ item.direction }}"
    port: "{{ item.port }}"
    protocol: "{{ item.protocol }}"
    log: "{{ item.log | default(true) }}"
    comment: "{{ item.comment }}"
  loop: "{{ cis_ubuntu2204_firewall_rules_exist_open_ports | flatten(levels=1) }}"
  when:
    - cis_ubuntu2204_rule_4_1_6
    - cis_ubuntu2204_firewall == "ufw"
  tags:
    - rule_4_1
    - server_l1
    - workstation_l1

- name: "SECTION4 | 4.1.7 | Ensure ufw default deny firewall policy"
  when:
    - cis_ubuntu2204_rule_4_1_7
    - cis_ubuntu2204_firewall == "ufw"
  tags:
    - rule_4_1
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION4 | 4.1.7 | Ensure ufw default deny firewall policy | in deny"
      community.general.ufw:
        policy: deny
        direction: incoming
        log: true
    - name: "SECTION4 | 4.1.7 | Ensure ufw default deny firewall policy | out deny"
      community.general.ufw:
        policy: "{{ cis_ubuntu2204_firewall_ufw_outgoing_policy | default('deny') }}"
        direction: outgoing
        log: true
    - name: "SECTION4 | 4.1.7 | Ensure ufw default deny firewall policy | routed deny"
      community.general.ufw:
        policy: deny
        direction: routed
        route: true
        log: true

# ------------------------------------------------------------------------------

- name: "SECTION4 | 4.2.1 | Ensure nftables is installed"
  ansible.builtin.apt:
    name: nftables
    state: present
    force_apt_get: true
  when:
    - cis_ubuntu2204_rule_4_2_1
    - cis_ubuntu2204_firewall == "nftables"
  tags:
    - rule_4_2
    - server_l1
    - workstation_l1

- name: "SECTION4 | 4.2.2 | Ensure ufw is uninstalled or disabled with nftables"
  ansible.builtin.apt:
    name: ufw
    state: absent
    purge: true
  when:
    - cis_ubuntu2204_rule_4_2_2
    - cis_ubuntu2204_firewall == "nftables"
  tags:
    - rule_4_2
    - server_l1
    - workstation_l1

- name: "SECTION4 | 4.2.3 | Ensure iptables are flushed with nftables"
  when:
    - cis_ubuntu2204_rule_4_2_3
    - cis_ubuntu2204_firewall == "nftables"
  tags:
    - rule_4_2
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION4 | 4.2.3 | Ensure iptables are flushed with nftables | ipv4"
      ansible.builtin.iptables:
        flush: true
        ip_version: ipv4
    - name: "SECTION4 | 4.2.3 | Ensure iptables are flushed with nftables | ipv6"
      ansible.builtin.iptables:
        flush: true
        ip_version: ipv6

- name: "SECTION4 | 4.2.4 | Ensure a nftables table exists"
  ansible.builtin.command: >
    nft create table inet {{ cis_ubuntu2204_firewall_nftables_table_name }}
  changed_when: false
  failed_when: false
  when:
    - cis_ubuntu2204_rule_4_2_4
    - cis_ubuntu2204_firewall == "nftables"
  tags:
    - rule_4_2
    - server_l1
    - workstation_l1

- name: "SECTION4 | 4.2.5 | Ensure nftables base chains exist"
  ansible.builtin.command: >
    nft create chain inet {{ cis_ubuntu2204_firewall_nftables_table_name }} {{ item }} { type filter hook {{ item }} priority 0 \; }
  changed_when: false
  failed_when: false
  with_items:
    - input
    - forward
    - output
  when:
    - cis_ubuntu2204_rule_4_2_5
    - cis_ubuntu2204_firewall == "nftables"
  tags:
    - rule_4_2
    - server_l1
    - workstation_l1

- name: "SECTION4 | 4.2.6 | Ensure nftables loopback traffic is configured"
  when:
    - cis_ubuntu2204_rule_4_2_6
    - cis_ubuntu2204_firewall == "nftables"
  tags:
    - rule_4_2
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION4 | 4.2.6 | Ensure nftables loopback traffic is configured | ingress lo accept"
      ansible.builtin.command: >
        nft add rule inet {{ cis_ubuntu2204_firewall_nftables_table_name }} input iif lo accept
      changed_when: false
      failed_when: false
    - name: "SECTION4 | 4.2.6 | Ensure nftables loopback traffic is configured | ingress 127.0.0.0/8 counter drop"
      ansible.builtin.command: >
        nft create rule inet {{ cis_ubuntu2204_firewall_nftables_table_name }} input ip saddr 127.0.0.0/8 counter drop
      changed_when: false
      failed_when: false
    - name: "SECTION4 | 4.2.6 | Ensure nftables loopback traffic is configured | ingress ::1 counter drop"
      ansible.builtin.command: >
        nft add rule inet {{ cis_ubuntu2204_firewall_nftables_table_name }} input ip6 saddr ::1 counter drop
      changed_when: false
      failed_when: false

- name: "SECTION4 | 4.2.7 | Ensure nftables outbound and established connections are configured"
  ansible.builtin.command: >
    nft add rule inet {{ cis_ubuntu2204_firewall_nftables_table_name }} {{ item.dir }} ip protocol {{ item.protocol }} ct state {{ item.state }} accept
  changed_when: false
  failed_when: false
  with_items:
    - dir: input
      protocol: tcp
      state: established
    - dir: input
      protocol: udp
      state: established
    - dir: input
      protocol: icmp
      state: established
    - dir: output
      protocol: tcp
      state: new,related,established
    - dir: output
      protocol: udp
      state: new,related,established
    - dir: output
      protocol: icmp
      state: new,related,established
  when:
    - cis_ubuntu2204_rule_4_2_7
    - cis_ubuntu2204_firewall == "nftables"
  tags:
    - rule_4_2
    - server_l1
    - workstation_l1

- name: "SECTION4 | 4.2.8 | Ensure nftables default deny firewall policy"
  ansible.builtin.command: >
    nft chain inet {{ cis_ubuntu2204_firewall_nftables_table_name }} {{ item }} { policy drop \; }
  changed_when: false
  failed_when: false
  with_items:
    - input
    - forward
    - output
  when:
    - cis_ubuntu2204_rule_4_2_8
    - cis_ubuntu2204_firewall == "nftables"
  tags:
    - rule_4_2
    - server_l1
    - workstation_l1

- name: "SECTION4 | 4.2.9 | Ensure nftables service is enabled"
  ansible.builtin.systemd_service:
    name: nftables
    daemon_reload: true
    enabled: true
    masked: false
    state: started
  when:
    - cis_ubuntu2204_rule_4_2_9
    - cis_ubuntu2204_firewall == "nftables"
  tags:
    - rule_4_2
    - server_l1
    - workstation_l1

- name: "SECTION4 | 4.2.10 | Ensure nftables rules are permanent"
  ansible.builtin.command: >
    nft list table inet {{ cis_ubuntu2204_firewall_nftables_table_name }} > /etc/nftables.conf
  changed_when: false
  failed_when: false
  when:
    - cis_ubuntu2204_rule_4_2_10
    - cis_ubuntu2204_firewall == "nftables"
  tags:
    - rule_4_2
    - server_l1
    - workstation_l1

# ------------------------------------------------------------------------------

- name: "SECTION4 | 4.3.1.1 | Ensure iptables packages are installed"
  ansible.builtin.apt:
    name:
      - iptables
      - iptables-persistent
    state: present
    force_apt_get: true
  when:
    - cis_ubuntu2204_rule_4_3_1_1
    - cis_ubuntu2204_firewall == "iptables"
  tags:
    - rule_4_3_1
    - server_l1
    - workstation_l1

- name: "SECTION4 | 4.3.1.2 | Ensure nftables is not installed with iptables"
  ansible.builtin.apt:
    name: nftables
    state: absent
    purge: true
  when:
    - cis_ubuntu2204_rule_4_3_1_2
    - cis_ubuntu2204_firewall == "iptables"
  tags:
    - rule_4_3_1
    - server_l1
    - workstation_l1

- name: "SECTION4 | 4.3.1.3 | Ensure ufw is uninstalled or disabled with iptables"
  ansible.builtin.apt:
    name: ufw
    state: absent
    purge: true
  when:
    - cis_ubuntu2204_rule_4_3_1_3
    - cis_ubuntu2204_firewall == "iptables"
  tags:
    - rule_4_3_1
    - server_l1
    - workstation_l1

# ------------------------------------------------------------------------------

- name: "SECTION4 | 4.3.2.1 | Ensure iptables default deny firewall policy"
  ansible.builtin.iptables:
    chain: "{{ item }}"
    policy: DROP
  loop:
    - INPUT
    - OUTPUT
    - FORWARD
  when:
    - cis_ubuntu2204_rule_4_3_2_1
    - cis_ubuntu2204_firewall == "iptables"
  tags:
    - rule_4_3_2
    - server_l1
    - workstation_l1

- name: "SECTION4 | 4.3.2.2 | Ensure iptables loopback traffic is configured"
  when:
    - cis_ubuntu2204_rule_4_3_2_2
    - cis_ubuntu2204_firewall == "iptables"
  tags:
    - rule_4_3_2
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION4 | 4.3.2.2 | Ensure iptables loopback traffic is configured | ingress lo allow"
      ansible.builtin.iptables:
        chain: INPUT
        in_interface: lo
        jump: ACCEPT
    - name: "SECTION4 | 4.3.2.2 | Ensure iptables loopback traffic is configured | egress lo allow"
      ansible.builtin.iptables:
        chain: OUTPUT
        out_interface: lo
        jump: ACCEPT
    - name: "SECTION4 | 4.3.2.2 | Ensure iptables loopback traffic is configured | ingress 127.0.0.0/8 deny"
      ansible.builtin.iptables:
        chain: INPUT
        source: 127.0.0.0/8
        jump: DROP

- name: "SECTION4 | 4.3.2.3 | Ensure iptables outbound and established connections are configured"
  when:
    - cis_ubuntu2204_rule_4_3_2_3
    - cis_ubuntu2204_firewall == "iptables"
  tags:
    - rule_4_3_2
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION4 | 4.3.2.3 | Ensure iptables outbound and established connections are configured | output"
      ansible.builtin.iptables:
        chain: OUTPUT
        protocol: "{{ item }}"
        ctstate: NEW,ESTABLISHED
        jump: ACCEPT
      with_items:
        - tcp
        - udp
        - icmp
    - name: "SECTION4 | 4.3.2.3 | Ensure iptables outbound and established connections are configured | input "
      ansible.builtin.iptables:
        chain: INPUT
        protocol: "{{ item }}"
        ctstate: ESTABLISHED
        jump: ACCEPT
      with_items:
        - tcp
        - udp
        - icmp

- name: "SECTION4 | 4.3.2.4 | Ensure iptables firewall rules exist for all open ports"
  when:
    - cis_ubuntu2204_rule_4_3_2_4
    - cis_ubuntu2204_firewall == "iptables"
  tags:
    - rule_4_3_2
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION4 | 4.3.2.4 | Ensure iptables firewall rules exist for all open ports | ssh"
      ansible.builtin.iptables:
        chain: INPUT
        protocol: tcp
        destination_port: 22
        ctstate: NEW
        jump: ACCEPT

# ------------------------------------------------------------------------------

- name: "SECTION4 | 4.3.3.1 | Ensure ip6tables default deny firewall policy"
  ansible.builtin.iptables:
    chain: "{{ item }}"
    policy: DROP
    ip_version: ipv6
  loop:
    - INPUT
    - OUTPUT
    - FORWARD
  when:
    - cis_ubuntu2204_rule_4_3_3_1
    - cis_ubuntu2204_firewall == "iptables"
  tags:
    - rule_4_3_3
    - server_l1
    - workstation_l1

- name: "SECTION4 | 4.3.3.2 | Ensure ip6tables loopback traffic is configured"
  when:
    - cis_ubuntu2204_rule_4_3_3_2
    - cis_ubuntu2204_firewall == "iptables"
  tags:
    - rule_4_3_3
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION4 | 4.3.3.2 | Ensure ip6tables loopback traffic is configured | ingress lo allow"
      ansible.builtin.iptables:
        chain: INPUT
        in_interface: lo
        jump: ACCEPT
        ip_version: ipv6
    - name: "SECTION4 | 4.3.3.2 | Ensure ip6tables loopback traffic is configured | egress lo allow"
      ansible.builtin.iptables:
        chain: OUTPUT
        out_interface: lo
        jump: ACCEPT
        ip_version: ipv6
    - name: "SECTION4 | 4.3.3.2 | Ensure ip6tables loopback traffic is configured | ingress ::1 deny"
      ansible.builtin.iptables:
        chain: INPUT
        source: ::1
        jump: DROP
        ip_version: ipv6

- name: "SECTION4 | 4.3.3.3 | Ensure ip6tables outbound and established connections are configured"
  when:
    - cis_ubuntu2204_rule_4_3_3_3
    - cis_ubuntu2204_firewall == "iptables"
  tags:
    - rule_4_3_3
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION4 | 4.3.3.3 | Ensure ip6tables outbound and established connections are configured | output"
      ansible.builtin.iptables:
        chain: OUTPUT
        protocol: "{{ item }}"
        ctstate: NEW,ESTABLISHED
        jump: ACCEPT
        ip_version: ipv6
      with_items:
        - tcp
        - udp
        - icmp
    - name: "SECTION4 | 4.3.3.3 | Ensure ip6tables outbound and established connections are configured | input "
      ansible.builtin.iptables:
        chain: INPUT
        protocol: "{{ item }}"
        ctstate: ESTABLISHED
        jump: ACCEPT
        ip_version: ipv6
      with_items:
        - tcp
        - udp
        - icmp

- name: "SECTION4 | 4.3.3.4 | Ensure ip6tables firewall rules exist for all open ports"
  when:
    - cis_ubuntu2204_rule_4_3_3_4
    - cis_ubuntu2204_firewall == "iptables"
  tags:
    - rule_4_3_3
    - server_l1
    - workstation_l1
  block:
    - name: "SECTION4 | 4.3.3.4 | Ensure ip6tables firewall rules exist for all open ports | ssh"
      ansible.builtin.iptables:
        chain: INPUT
        protocol: tcp
        destination_port: 22
        ctstate: NEW
        jump: ACCEPT
        ip_version: ipv6
